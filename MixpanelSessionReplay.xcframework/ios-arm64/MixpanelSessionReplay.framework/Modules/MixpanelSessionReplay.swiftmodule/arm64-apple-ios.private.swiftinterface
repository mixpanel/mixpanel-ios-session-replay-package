// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name MixpanelSessionReplay
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreGraphics
import Foundation
@_exported import MixpanelSessionReplay
import Network
import ObjectiveC
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ObjectiveC.runtime
import zlib
public enum MPAutoMaskedViews : Swift.String, Swift.Codable {
  case Image, Text, Web
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MPSessionReplayConfig : Swift.Codable {
  public var wifiOnly: Swift.Bool
  public var autoStartRecordingSessionsPercent: Swift.Double
  public var autoStartRecording: Swift.Bool
  public var autoMaskedViews: Swift.Set<MixpanelSessionReplay.MPAutoMaskedViews>
  public var enableLogging: Swift.Bool
  public init(wifiOnly: Swift.Bool = true, autoMaskedViews: Swift.Set<MixpanelSessionReplay.MPAutoMaskedViews> = [.Image, .Text, .Web], autoStartRecording: Swift.Bool = true, autoStartRecordingSessionsPercent: Swift.Double = 100, enableLogging: Swift.Bool = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum GzipError : Swift.Error {
  case stream
  case data
  case memory
  case buffer
  case version
  case unknown(code: Swift.Int)
}
extension Foundation.Data {
  public func gzipCompressed(level: Swift.Int32 = Z_DEFAULT_COMPRESSION) throws -> Foundation.Data
}
@_hasMissingDesignatedInitializers open class MPSessionReplay {
  open class func initialize(token: Swift.String, distinctId: Swift.String, config: MixpanelSessionReplay.MPSessionReplayConfig = MPSessionReplayConfig()) -> MixpanelSessionReplay.MPSessionReplayInstance?
  open class func getInstance() -> MixpanelSessionReplay.MPSessionReplayInstance?
  open class func getReplayId() -> Swift.String?
  @objc deinit
}
public struct ServerProxyResource {
  public init(queryItems: [Foundation.URLQueryItem]? = nil, headers: [Swift.String : Swift.String])
  public let queryItems: [Foundation.URLQueryItem]?
  public let headers: [Swift.String : Swift.String]
}
@_hasMissingDesignatedInitializers open class MPSessionReplayInstance {
  public var isRecording: Swift.Bool {
    get
  }
  open var wifiOnly: Swift.Bool {
    get
    set
  }
  open var loggingEnabled: Swift.Bool {
    get
    set
  }
  public func startRecording(recordSessionsPercent: Swift.Double = 100.0)
  public func captureScreenshot()
  public func captureScreenshot(withTouchEvent event: UIKit.UIEvent)
  public func identify(distinctId: Swift.String)
  public func stopRecording()
  public func flush()
  public func addSensitiveClass(_ aClass: Swift.AnyClass)
  public func removeSensitiveClass(_ aClass: Swift.AnyClass)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var frameRelativeToWindow: CoreFoundation.CGRect? {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func mpReplaySensitive(_ isSensitive: Swift.Bool) -> some SwiftUICore.View
  
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var mpReplaySensitive: Swift.Bool? {
    get
    set
  }
}
extension MixpanelSessionReplay.MPAutoMaskedViews : Swift.Equatable {}
extension MixpanelSessionReplay.MPAutoMaskedViews : Swift.Hashable {}
extension MixpanelSessionReplay.MPAutoMaskedViews : Swift.RawRepresentable {}
