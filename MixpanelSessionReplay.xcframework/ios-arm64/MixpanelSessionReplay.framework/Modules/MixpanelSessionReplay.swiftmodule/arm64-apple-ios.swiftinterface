// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MixpanelSessionReplay
import Foundation
@_exported import MixpanelSessionReplay
import Network
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public struct SessionReplayConfig : Swift.Codable {
  public var wifiOnly: Swift.Bool
  public var recordSessionsPercent: Swift.Double
  public var maskAllText: Swift.Bool
  public var maskAllImages: Swift.Bool
  public init(wifiOnly: Swift.Bool = true, recordSessionsPercent: Swift.Double = 0, maskAllText: Swift.Bool = true, maskAllImages: Swift.Bool = true)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum GzipError : Swift.Error {
  case stream
  case data
  case memory
  case buffer
  case version
  case unknown(code: Swift.Int)
}
extension Foundation.Data {
  public func gzipCompressed(level: Swift.Int32 = Z_DEFAULT_COMPRESSION) throws -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class TouchEventRecorderWindow : UIKit.UIWindow {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func sendEvent(_ event: UIKit.UIEvent)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(windowScene: UIKit.UIWindowScene)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SessionReplayInstance {
  open var recordSessionsPercent: Swift.Double
  open var wifiOnly: Swift.Bool {
    get
    set
  }
  open var loggingEnabled: Swift.Bool {
    get
    set
  }
  public func startRecording()
  @objc public func record()
  public func stopRecording()
  public func flush()
  public func addSensitiveView(_ view: UIKit.UIView)
  public func removeSensitiveView(_ view: UIKit.UIView)
  public func addSensitiveClass(_ aClass: Swift.AnyClass)
  public func removeSensitiveClass(_ aClass: Swift.AnyClass)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SessionReplay {
  open class func initialize(token: Swift.String, distinctId: Swift.String, config: MixpanelSessionReplay.SessionReplayConfig = SessionReplayConfig()) -> MixpanelSessionReplay.SessionReplayInstance
  open class func getInstance() -> MixpanelSessionReplay.SessionReplayInstance?
  open class func getReplayId() -> Swift.String?
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var frameRelativeToWindow: CoreFoundation.CGRect? {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func replaySensitive() -> some SwiftUICore.View
  
}
